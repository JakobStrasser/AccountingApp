@using AccountingApp.ViewModels;
@model JournalViewModel



<form asp-controller="Journal" asp-action="Submit" id="JournalForm" method="post">




    <label name="yearLabel">Välj bokföringsår</label>
    <select id="AccountingYear" asp-for="SelectedAccountingYear" asp-items="@Model.AccountingYearsList" onselect="ChangeYears(this)"></select>
    <label name="dateLabel">Välj bokföringsdatum</label>
    <input asp-for="SelectedDate" type="date" value="@DateTime.Today.ToShortDateString()" />
    <label>Välj journal</label>
    <select id="JournalSelect" asp-for="SelectedJournal" asp-items="@Model.JournalsList"></select>
    <label>Verifikationstext:</label>
    <input asp-for="Text" type="text" />
    <table>
        <thead>
            <tr>
                <th colspan="2">Konto</th>
                <th>Debit</th>
                <th>Kredit</th>

            </tr>
        </thead>
        <tbody id="JournalFormBody">
            <tr id="Row_0">
                <td>
                    <input asp-for="Rows[0].AccountNumber" type="text" onkeyup="SearchAccounts(this, 0)" />
                </td>
                <td>
                    <label id="Row_AccountName_0">Kontonamn</label>
                </td>
                <td>
                    <input asp-for="Rows[0].Debit" onchange="ValidateRow(this, 0)" type="text" />
                </td>
                <td>
                    <input asp-for="Rows[0].Credit" onchange="ValidateRow(this, 0)" type="text" />
                </td>

                <td>
                    <input type="button" onclick="RemoveRow(this, 0)" value="Ta bort" />
                </td>
                <td>
                    <label id="Rows_Warning_0"></label>
                </td>
            </tr>
            @for (int i = 1; i < 100; i++)
            {
        <tr id="Row_@i" class="d-none">
            <td>
                <input asp-for="Rows[i].AccountNumber" type="text" onkeyup="SearchAccounts(this, @i)" />
            </td>
            <td>
                <label id="Row_AccountName_@i">Kontonamn</label>
            </td>
            <td>
                <input asp-for="Rows[i].Debit" onchange="ValidateRow(this, @i)" type="text" />
            </td>
            <td>
                <input asp-for="Rows[i].Credit" onchange="ValidateRow(this, @i)" type="text" />
            </td>

            <td>
                <input type="button" onclick="RemoveRow(this, @i)" value="Ta bort" />
            </td>
            <td>
                <label id="Rows_Warning_@i"></label>
            </td>
        </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="2"><label id="SumLabel">Summa</label></td>
                <td><label id="DebitSum"></label></td>
                <td><label id="CreditSum"></label></td>

            </tr>
            <tr>
                <td>
                    <input type="button" name="AddRowButton" onclick="AddRowButtonClicked(this)" value="+" />
                </td>
            </tr>
            <tr>
                <td><input asp-for="RowsUsed" type="hidden" value="0" /><input type="submit" asp-route-companyId="@Model.Company.Id" name="SubmitFormButton" /> </td>
            </tr>
        </tfoot>
    </table>
</form>

<script>
    //Get list of accounts for account searching
    const Accounts = JSON.parse('@Html.Raw(Json.Serialize(Model.Accounts))');

    //Set index of rows visible
    let NumberOfRows = 0;

    //Limit start & end date for datepicker
    $("#SelectedDate").attr({ "min": '@Model.SelectedAccountingYearStartDate.ToShortDateString()' });
    $("#SelectedDate").attr({ "max": '@Model.SelectedAccountingYearEndDate.ToShortDateString()' });

    //Shows a new row
    function AddRowButtonClicked(object) {

        NumberOfRows++;
        let rowToShowId = "#Row_" + NumberOfRows;

        $(rowToShowId).toggleClass('d-none');
        $("#RowsUsed").val(NumberOfRows);
        UpdateSum();

    }

    function SearchAccounts(object, row ) {
        /*TODO: Implement popup search*/
        const currentValue = object.value;
        let currentRowId = "#Row_AccountName_" + row;

        if (Accounts[currentValue] !== null) {
            $(currentRowId).text(Accounts[currentValue]);
        }
    }

    function ChangeYear(object) {
        console.log(object.value);
    }

    //Moves every row below up one and clears and hides the last row
    function RemoveRow(object, row) {

        for (let i = row; i < NumberOfRows; i++) {

            $("#Rows_" + i + "__AccountNumber").val($("#Rows_" + (i+1) + "__AccountNumber").val());
            $("#Rows_" + i + "__Credit").val($("#Rows_" + (i + 1) + "__Credit").val());
            $("#Rows_" + i + "__Credit").val($("#Rows_" + (i + 1) + "__Debit").val());
        }
        $("#Rows_" + NumberOfRows + "__AccountNumber").val("");
        $("#Rows_" + NumberOfRows + "__Credit").val("");
        $("#Rows_" + NumberOfRows + "__Debit").val("");

        $("#Row_" + NumberOfRows).toggleClass('d-none');
        NumberOfRows--;
        $("#RowsUsed").val(NumberOfRows);
        UpdateSum();
    }

    //Loops through visible rows and sums Credit, Debit columns
    function UpdateSum() {
        let creditSum = 0;
        let debitSum = 0;

       
        for (let i = 0; i <= NumberOfRows; i++) {

            //Handle ',' as decimal sign

            let rowDebit = parseFloat($("#Rows_" + i + "__Debit").val().replace(',', '.'));          
            let rowCredit = parseFloat($("#Rows_" + i + "__Credit").val().replace(',', '.'));
            
            rowDebit = $.isNumeric(rowDebit) ? rowDebit : 0;
            rowCredit = $.isNumeric(rowCredit) ? rowCredit : 0;
          
            debitSum += rowDebit;
            creditSum += rowCredit;
        }
        if (debitSum === creditSum)
            $("#SumLabel").css('color', 'green');
        else
            $("#SumLabel").css('color', 'red');
        $("#DebitSum").text(debitSum);
        $("#CreditSum").text(creditSum);      
    }

    function ValidateRow(object, row) {
        let validateText = "";
        //Validate account number
        let accountNumber = $("#Rows_" + row + "__AccountNumber").val();
       
        if (Accounts[accountNumber] == undefined)
            validateText += "Konto saknas! ";

        // Can only use either debit or credit field so empty other one
        if (object.id == "Rows_" + row + "__Debit")
            $("#Rows_" + row + "__Credit").val("");
        else if (object.id == "Rows_" + row + "__Credit")
            $("#Rows_" + row + "__Debit").val("");
        

        $("#Rows_Warning_" + row).text(validateText);
        UpdateSum(); //Finally update sums
    }
</script>